
# packages and headers {{{{
snippet doc "document" b
\documentclass{article}
\usepackage{/Users/albertgu/Dropbox/Stanford/latex/agu}
$0
\begin{document}
\end{document}
endsnippet

snippet fancy "fancyhdr" b
\usepackage{fancyhdr}
\pagestyle{fancy}
\fancyhf{}
\renewcommand{\headrulewidth}{1pt}
\renewcommand{\footrulewidth}{1pt}
\lhead{$1}
\rhead{$2}
\cfoot{\thepage}
endsnippet

snippet subfiles "subfiles" b
\usepackage{subfiles}
%\graphicspath{{images/}{../images/}}
%\documentclass[../main.tex]{subfiles}
endsnippet
# }}}}
# environments {{{{
snippet "b(egin)?" "begin{} / end{}" brm
\begin{$1}%
	${2:${VISUAL}}
\end{$1}
endsnippet

snippet thm "theorem" bm
\begin{theorem}%
	${1:${VISUAL}}
\end{theorem}
endsnippet

snippet proof "proof" bm
\begin{proof}
	${1:${VISUAL}}
\end{proof}
endsnippet

snippet def "definition" bm
\begin{definition}%
	${1:${VISUAL}}
\end{definition}
endsnippet

snippet not "notation" b
\begin{notation}%
	${1:${VISUAL}}
\end{notation}
endsnippet

snippet lmm "lemma" b
\begin{lemma}%
	${1:${VISUAL}}
\end{lemma}
endsnippet

snippet cor "corollary" b
\begin{corollary}%
	${1:${VISUAL}}
\end{corollary}
endsnippet

snippet prop "proposition" b
\begin{proposition}%
	${1:${VISUAL}}
\end{proposition}
endsnippet

snippet rmk "remark" b
\begin{remark}%
	${1:${VISUAL}}
\end{remark}
endsnippet

snippet conj "conjecture" b
\begin{conjecture}%
	${1:${VISUAL}}
\end{conjecture}
endsnippet

snippet question "question" b
\begin{question}%
	${1:${VISUAL}}
\end{question}
endsnippet

snippet example "example" b
\begin{example}%
	${1:${VISUAL}}
\end{example}
endsnippet

snippet enum "enumerate" b
\begin{enumerate}
	${1:${VISUAL}}
\end{enumerate}
endsnippet

snippet item "itemize" b
\begin{itemize}
	${1:${VISUAL}}
\end{itemize}
endsnippet

snippet align "align*" b
\begin{align*}
	${1:${VISUAL}}
\end{align*}
$0
endsnippet

snippet eq "equation" b
\begin{equation}%
	${1:${VISUAL}}
\end{equation}
endsnippet

# }}}}
# sections {{{{
snippet S "\section{}" b
\section{$1}%
\label{sec:$2}

$0
endsnippet

snippet SS "\section{}" b
\subsection{$1}%
\label{sec:$2}

$0
endsnippet
# }}}}

snippet " "Latex quote" A
\`\`${1:${VISUAL}}''$0
endsnippet

### MATH SNIPPETS

# define math mode {{{{
# global !p
# texMathZones = ['texMathZone' + x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS',
# 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS',
# 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z', 'AmsA', 'AmsB', 'AmsC',
# 'AmsD', 'AmsE', 'AmsF', 'AmsG', 'AmsAS', 'AmsBS', 'AmsCS', 'AmsDS', 'AmsES',
# 'AmsFS', 'AmsGS' ]]
# 
# texIgnoreMathZones = ['texMathText']
# 
# texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
# texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")
# 
# ignore = texIgnoreMathZoneIds[0]
# 
# def math():
# 	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
# 	try:
# 		first = next(
#             i for i in reversed(synstackids)
#             if i in texIgnoreMathZoneIds or i in texMathZoneIds
#         )
# 		return first != ignore
# 	except StopIteration:
# 		return False
# 
# def not_math():
# 	return not math()
# endglobal

# New math checks in latest vimtex
global !p
def math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'
def not_math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '0'

def comment(): 
    return vim.eval('vimtex#syntax#in_comment()') == '1'

# usage:context "env('itemize')"
def env(name):
    [x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
    return x != '0' and y != '0'
endglobal
# }}}}
# enter math modes {{{{

# context "not math()"
snippet "^\$|(?<=[^\\])\$" "\( \)" rA
\( ${1:${VISUAL}} \)
endsnippet
# context "not_math()"
# snippet $ "inline math" A
# $${1:${VISUAL}}$
# endsnippet

# context "not math()"
snippet "\\\[" "display math" brA
\begin{align*}
	${1:${VISUAL}}
\end{align*}
$0
endsnippet
# }}}}
# matrices {{{{
context "math()"
snippet mat "Smart Matrix" b
\begin{${1:/p/b/v/V/B/small}matrix}
	$0
\end{$1matrix}
endsnippet

context "math()"
snippet bmat "bracket matrix" b
\begin{bmatrix}
	$1
\end{bmatrix}
endsnippet

context "math()"
snippet "bmat " "inline bracket matrix" irA
\begin{bmatrix} $1 \end{bmatrix}$0
endsnippet

context "math()"
snippet pmat "paren matrix" b
\begin{pmatrix}
	$1
\end{pmatrix}
endsnippet

context "math()"
snippet "pmat " "inline paren matrix" irA
\begin{pmatrix} $1 \end{pmatrix}$0
endsnippet
# }}}}
# fractions {{{{

# TODO is there a way to grab vimlatex leader instead of hardcoding?
context "math()"
snippet ;/ "\frac{}{}" iA
\frac{${1:${VISUAL}}}{$2}
endsnippet

### https://castel.dev/post/lecture-notes-1/

context "math()"
# snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{.+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

context "math()"
priority 1000
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

# }}}}
# postfix operators {{{{
context "math()"
priority 100
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
priority 100
snippet "([a-zA-Z])hat" "hat" riAe
\hat{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
priority 100
snippet "([a-zA-Z])tld" "tilde" riAe
\tilde{`!p snip.rv=match.group(1)`}
endsnippet

# this conflicts with \vdots, etc
# context "math()"
# priority 100
# snippet "([a-zA-Z])dot" "dot" riAe
# \dot{`!p snip.rv=match.group(1)`}
# endsnippet
# }}}}
# misc {{{{
# context "math()"
# snippet "sq" "square root" iA

# TODO change these to ddt or ppt?
context "math()"
snippet part "partial derivative" i
\frac{\partial}{\partial $1}$0
endsnippet

context "math()"
snippet partn "partial derivative" i
\frac{\partial $1}{\partial $2}$0
endsnippet

context "math()"
snippet sum "\sum" i
\sum_{$1}^{$2} 
endsnippet
# }}}}
# math delimiters {{{{
context "math()"
snippet "^\(\(|(?<=[^\\])\(\(" "\left( \right)" irA
\left( $1 \right)
endsnippet

context "math()"
snippet [[ "\left[ \right]" iA
\left[ $1 \right]
endsnippet

context "math()"
snippet {{ "\left\{ \right\}" iA
\left\\\{ $1 \right\\\}
endsnippet

context "math()"
snippet || "\left\| \right\|" iA
\left\\| $1 \right\\|
endsnippet

context "math()"
snippet {} "{}" iA
{$1}
endsnippet

context "math()"
snippet () "()" iA
($1)
endsnippet

context "math()"
snippet [] "[]" iA
[$1]
endsnippet

context "math()"
snippet ^^ "^{}" iA
^{$1}
endsnippet

context "math()"
snippet __ "_{}" iA
_{$1}
endsnippet
# }}}}


# sympy {{{{
snippet sympy "sympy block " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`
endsnippet
# }}}}



### Environments {{{{


snippet algorithm "algorithm" b
% https://en.wikibooks.org/wiki/LaTeX/Algorithms#Typesetting_using_the_algorithmicx_package
\begin{algorithm}
\caption{$1}%
\label{algo:$2}
\begin{algorithmic}[1]
% \renewcommand{\algorithmicrequire}{\textbf{Input:}}
% \Require{}
% \renewcommand{\algorithmicensure}{\textbf{Output:}}
% \Ensure{}
% \State $\gets$
% \Statex % unnumbered
% \If{}\Comment{}
	% \State \Return{$\left(\vb[k],\vb[k+1],\dots,\vb[k+t]\right)$}
% \EndIf
% \For{}
% \State \Return{$\left(P^{(k)}_0(X),\dots,P^{(k)}_t(X)\right)$}
% \Function{<name>}{<params>}
% \Call{<name>}{<params>}
\end{algorithmic}
\end{algorithm}
endsnippet


snippet thebib "thebibliography" b
\begin{thebibliography}{9}
\bibitem{latexcompanion} 
Michel Goossens, Frank Mittelbach, and Alexander Samarin. 
\textit{The \LaTeX\ Companion}. 
Addison-Wesley, Reading, Massachusetts, 1993.
\end{thebibliography}
endsnippet

snippet toggle "toggle" b
\newtoggle{todo}
\toggletrue{todo}
% \togglefalse{todo}
\newcommand\remark[1]{\iftoggle{todo}{\textcolor{red}{#1}}{}}
endsnippet

snippet figure "figure" b
\begin{figure}[!ht]
\begin{minipage}{.5\linewidth}%
    \centering
    \includegraphics[width=\linewidth]{}
\end{minipage}
\caption{ }
\label{fig:}
\end{figure}
endsnippet

snippet subfigure "subfigure" b
\begin{figure}[ht]
  \centering
  \begin{subfigure}[t]{0.5\linewidth}
    \centering
    \includegraphics[width=\textwidth]{figures/}
    \caption{}
  \end{subfigure}
  \begin{subfigure}[t]{0.5\linewidth}
    \centering
    \includegraphics[width=\textwidth]{figures/}
    \caption{}
  \end{subfigure}
  \caption{
    Function approximation comparison between different instantiations of the generalized tilted Laguerre family (\cref{sec:derivation-lagt}).
  }
  \label{fig:}
\end{figure}
endsnippet

snippet table "table" b
\begin{table}
    \caption{}
    \centering
    \begin{tabular}{@{}ll@{}}
        \toprule
        \midrule
        \bottomrule
    \end{tabular}
    \label{tab:}
\end{table}
endsnippet

snippet minipage "minipage" b
\begin{minipage}{.5\linewidth}
\begin{equation}%
  \label{eq:architecture}
  \begin{aligned}
  \end{aligned}
\end{equation}
\end{minipage}
endsnippet

# }}}}

snippet multicolumn "multicolumn"
\multicolumn{3}{c}{text}
\multirow{3}{*}{text}
endsnippet


# vim:foldmethod=marker:foldmarker={{{{,}}}}:foldlevelstart=0
