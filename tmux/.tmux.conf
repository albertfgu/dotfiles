unbind C-b
set -g prefix C-a
bind C-a send-prefix # pressing `prefix + prefix` sends <prefix> to the shell


# -- tmux-sensible settings ---------------------------------------------------- {{{
set -s escape-time 0                      # address vim mode switching delay (http://superuser.com/a/252717/65504)
set -g history-limit 50000                # increase scrollback buffer size
set -g display-time 2000                  # tmux messages are displayed for 4 seconds
set -g status-interval 5                  # refresh 'status-left' and 'status-right' more often
set -g default-terminal "screen-256color" # upgrade $TERM
set -g status-keys emacs                  # emacs key bindings in tmux command prompt (prefix + :) are better than vi keys, even for vim users
set -g focus-events on                    # focus events enabled for terminals that support them
setw -g aggressive-resize on              # super useful when using "grouped sessions" and multi-monitor setup
# necessary for some versions of macOS, not for Catalina
# tmux set-option -g default-command "reattach-to-user-namespace -l $SHELL"


# other settings
set-option -sa terminal-overrides ',screen-256color:RGB' # setting recommended by neovim :checkhealth
setw -g xterm-keys on
set -sg repeat-time 400                   # increase repeat timeout
# set-option -g allow-rename off

# edit and reload configuration
# bind C-e new-window -n '~/.tmux.conf' "sh -c '\${EDITOR:-vim} ~/.tmux.conf && tmux source ~/.tmux.conf && tmux display \"~/.tmux.conf reloaded\"'"
# bind C-r source-file ~/.tmux.conf \; display '~/.tmux.conf reloaded'
bind-key R run-shell ' \
        tmux source-file ~/.tmux.conf > /dev/null; \
        tmux display-message "Sourced .tmux.conf!"'

# ------------------------------------------------------------------------------ }}}

# -- display ------------------------------------------------------------------- {{{

# set -g base-index 1           # start windows numbering at 1
# setw -g pane-base-index 1     # make pane numbering consistent with windows

setw -g automatic-rename on   # rename window to reflect current program
set -g renumber-windows on    # renumber windows when a window is closed
set -g set-titles on          # set terminal title
set -g display-panes-time 800 # slightly longer pane indicators display time
# set -g display-time 1000      # slightly longer status messages display time (set by tmux-sensible)

# status bar
set -g status-position top
# set -g status-interval 10     # redraw status line every 10 seconds (set by tmux-sensible)

# clear both screen and history
bind -n C-l send-keys C-l \; run 'sleep 0.1' \; clear-history

# activity
set -g monitor-activity on
# set -g visual-activity on


# toggle mouse
bind m run "cut -c3- ~/.tmux.conf | sh -s _toggle_mouse"
set -g mouse on

# Use vi keys
# set -g status-keys vi # apparently deprecated?
set -g mode-keys vi

# ------------------------------------------------------------------------------ }}}

# -- panes and window control -------------------------------------------------- {{{

# pane navigation {{{
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

# arrow keys are repeatable
bind-key -r Left  select-pane -L
bind-key -r Down  select-pane -D
bind-key -r Up    select-pane -U
bind-key -r Right select-pane -R
# optional: add C-hjkl bindings like pain-control
# }}}
# use Alt-vim keys without prefix key to switch panes {{{
bind -n M-h select-pane -L
bind -n M-j select-pane -D
bind -n M-k select-pane -U
bind -n M-l select-pane -R
# }}}
# swap panes and windows {{{
bind -r '{' swap-window -d -t -1  # chosen so both [ and { are window commands
bind -r '}' swap-window -d -t +1
bind -r '(' swap-pane -D          # original ( switch-client -p -- original binding {
bind -r ')' swap-pane -U          # original ) switch-client -n -- original binding )
# }}}
# pane resizing {{{
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5
# }}}
# new panes and windows {{{
bind-key "|" split-window -h -c "#{pane_current_path}"   # split panes
bind-key "-" split-window -v -c "#{pane_current_path}"
bind-key "\\" split-window -fh -c "#{pane_current_path}" # full screen
bind-key "_" split-window -fv -c "#{pane_current_path}"
bind-key "%" split-window -h -c "#{pane_current_path}"   # original bindings
bind-key '"' split-window -v -c "#{pane_current_path}"
bind-key "c" new-window -c "#{pane_current_path}"        # new window maintain path
# }}}
# window navigation {{{
# unbind n
# unbind p
bind -r [ previous-window
bind -r ] next-window
# }}}
# window menu {{{
# this seems to be a default that most people don't know about?
bind-key    -T prefix       <                    display-menu -T "#[align=centre]#{window_index}:#{window_name}" -x W -y S "Swap Left" l "swap-window -t:-1" "Swap Right" r "swap-window -t:+1" "#{?pane_marked_set,,-}Swap Marked" s swap-window  Kill X kill-window Respawn R "respawn-window -k" "#{?pane_marked,Unmark,Mark}" m "select-pane -m" Rename n "command-prompt -I \"#W\" \"rename-window -- '%%'\""  "New After" w "new-window -a" "New At End" W new-window
# }}}
# pane menu {{{
bind-key    -T prefix       >                    display-menu -T "#[align=centre]#{pane_index} (#{pane_id})" -x P -y P "#{?mouse_word,Search For #[underscore]#{=/9/...:mouse_word},}" C-r "copy-mode -t=; send -Xt= search-backward \"#{q:mouse_word}\"" "#{?mouse_word,Type #[underscore]#{=/9/...:mouse_word},}" C-y "send-keys -l -- \"#{q:mouse_word}\"" "#{?mouse_word,Copy #[underscore]#{=/9/...:mouse_word},}" c "set-buffer -- \"#{q:mouse_word}\"" "#{?mouse_line,Copy Line,}" l "set-buffer -- \"#{q:mouse_line}\""  "Horizontal Split" h "split-window -h" "Vertical Split" v "split-window -v"  "Swap Up" u "swap-pane -U" "Swap Down" d "swap-pane -D" "#{?pane_marked_set,,-}Swap Marked" s swap-pane  Kill X kill-pane Respawn R "respawn-pane -k" "#{?pane_marked,Unmark,Mark}" m "select-pane -m" "#{?window_zoomed_flag,Unzoom,Zoom}" z "resize-pane -Z"
# }}}

# maximize current pane
bind + run 'cut -c3- ~/.tmux.conf | sh -s _maximize_pane "#{session_name}" #D'

# ------------------------------------------------------------------------------ }}}

# -- find windows and sessions ------------------------------------------------- {{{
bind w last-window            # move to last active window (default a)
# bind C-w choose-tree -Zw      # session + window picker with preview # not useful for workflow
# bind s choose-tree -Zs      # session picker (default binding)
bind-key Tab switch-client -l # move to last active session
# bind C new-session          # create session # better version by tmux-sessionist
# bind C-f command-prompt -p find-session 'switch-client -t %%' # find session # not useful because it requires remembering the session name

# rename windows
bind '#' command-prompt -I "#W" "rename-window -- '%%'"
# ------------------------------------------------------------------------------ }}}

# -- copy mode ----------------------------------------------------------------- {{{
# https://www.freecodecamp.org/news/tmux-in-practice-integration-with-system-clipboard-bcd72c62ff7b/
set -g set-clipboard on
bind-key Enter copy-mode
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi V send-keys -X select-line
bind-key -T copy-mode-vi r send-keys -X rectangle-toggle
bind-key -T copy-mode-vi 'C-v' send-keys -X begin-selection \; send-keys -X rectangle-toggle
bind-key -T copy-mode-vi Escape send-keys -X cancel
# bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"
# bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy"
bind-key -T copy-mode-vi y send-keys -X copy-pipe "pbcopy"
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "pbcopy"

bind-key -T copy-mode-vi 'C-j' send -X halfpage-down
bind-key -T copy-mode-vi 'C-k' send -X halfpage-up

# from gpakosz/.tmux
# replaced by tmux-yank
# copy to macOS clipboard
# if -b 'command -v pbcopy > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | pbcopy"'
# if -b 'command -v reattach-to-user-namespace > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | reattach-to-user-namespace pbcopy"'
# # copy to X11 clipboard
# if -b 'command -v xsel > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xsel -i -b"'
# if -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1"'
# # copy to Windows clipboard
# if -b 'command -v clip.exe > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | clip.exe"'
# if -b '[ -c /dev/clipboard ]' 'bind y run -b "tmux save-buffer - > /dev/clipboard"'
# ------------------------------------------------------------------------------ }}}

# -- buffers (paste) ----------------------------------------------------------- {{{
bind B list-buffers  # list paste buffers (original binding #)
bind P paste-buffer  # paste from the top paste buffer
bind C-p choose-buffer # choose which buffer to paste from (original binding C-p)
# }}}



# -- Other configuration ideas ------------------------------------------------- {{{
# Fuzzy matching session navigation via fzf utility
bind C-s split-window -v "tmux list-sessions | sed -E 's/:.*$//' | grep -v \"^$(tmux display-message -p '#S')\$\" | fzf --reverse | xargs tmux switch-client -t"
# bind s run "tmux new-window 'bash -ci fs'"

# Prompted join-pane
bind-key C-j command-prompt -p "join pane from: "  "join-pane -h -s '%%'"

# Easily swap a pane (targeted by pane number) with the current pane
# bind-key s display-panes\; command-prompt -p "pane #: "  "swap-pane -t '%%'"
# }}}

# -- plugins ------------------------------------------------------------------- {{{
set -g @tpm_plugins ' \
        tmux-plugins/tpm \
        tmux-plugins/tmux-yank \
        tmux-plugins/tmux-resurrect \
        tmux-plugins/tmux-continuum \
        arcticicestudio/nord-tmux \
        tmux-plugins/tmux-copycat \
        tmux-plugins/tmux-open \
        tmux-plugins/tmux-logging \
        tmux-plugins/tmux-sessionist \
        '

# Other potentially useful plugins
# set -g @plugin 'tmux-plugins/tmux-sensible'
# set -g @plugin 'tmux-plugins/tmux-pain-control'
# set -g @plugin 'tmux-plugins/tmux-copycat' # regex searches and fast match selection
# set -g @plugin 'Morantron/tmux-fingers'    # highlight potential matches to copy with letter hints
# set -g @plugin 'tmux-plugins/tmux-open'    # open highlighted selections from copy mode
# set -g @plugin 'tmux-plugins/tmux-logging' # prefix + alt + shift + p to dump history

set -g @yank_action 'copy-pipe'

set -g @continuum-restore 'on'
set -g @continuum-boot 'on'

set -g @resurrect-save 'C-s'     # default C-s
set -g @resurrect-restore 'C-r'  # default C-r
set -g @resurrect-save-shell-history 'on'
set -g @resurrect-capture-pane-contents 'on' # restore pane contents
set -g @resurrect-strategy-nvim 'session'

set -g @copycat_search       '/'   # default /
set -g @copycat_git_special  ''    # default C-g
set -g @copycat_file_search  'M-f' # default C-f
set -g @copycat_url_search   'M-u' # default C-u
set -g @copycat_digit_search 'M-d' # default C-d
set -g @copycat_hash_search  'M-h' # default M-h
set -g @copycat_ip_search    'M-i' # default M-i

set -g @open 'o' # default o
set -g @open-editor 'C-o' # default C-o

# tmux-logging configuration
set -g @logging_key '' # default P
set -g @screen-capture-key '' # default M-p
set -g @save-complete-history-key 'M-P' # default Alt-P
set -g @clear-history-key 'M-c' # default M-c

# tmux-sessionist configuration
set -g @sessionist-goto 'g'         # default g
set -g @sessionist-alternate 'S'    # default S
set -g @sessionist-new 'C'          # default C
# promote current pane into a new session
# analogous to how prefix + ! breaks current pane into new window
set -g @sessionist-promote-pane '@' # (default @)
# join currently marked pane (prefix + m) to current session/window
set -g @sessionist-join-pane 't'    # default t
set -g @sessionist-kill-session 'X' # default X

# https://github.com/tmux-plugins/tpm/blob/master/docs/tpm_not_working.md
# set-environment -g PATH "/usr/local/bin:/bin:/usr/bin" # only necessary with homebrew tmux

# Install tpm if it doesn't exist
if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
# }}}


# vim:foldmethod=marker
